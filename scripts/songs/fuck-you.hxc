import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import flixel.util.FlxTimer;
import funkin.Conductor;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.Paths;
import funkin.audio.FunkinSound;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.song.Song;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import funkin.audio.FunkinSound;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.cutscene.CutsceneType;
import funkin.play.PlayStatePlaylist;
import funkin.play.notes.NoteSplash;
import flixel.ui.FlxBar;
import flixel.ui.FlxBarFillDirection;
import funkin.util.Constants;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.math.FlxMath;
// FlxTween
import flixel.tweens.FlxTween;

import funkin.Conductor;

class fuckYouSong extends Song
{
	var camHudTweenX:FlxTween;
	var camHudTweenAngle:FlxTween;

	var strumScaleTweenXL:FlxTween;
	var strumScaleTweenYL:FlxTween;
	var strumScaleTweenXR:FlxTween;
	var strumScaleTweenYR:FlxTween;

	var strumAngleTweens:Array<FlxTween> = [];
	var strumAlphaTweens:Array<FlxTween> = [];

	public function new() {
		super('fuck-you');
	}

	public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		return super.listDifficulties(variationId, variationIds);
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void {

		for (i in 0...8) 
			strumAngleTweens[i] = null;

		super.onCountdownStart(event);

		var instance = PlayState.instance;

		var PlayerStrumLine = instance.playerStrumline;
		var OpponentStrumLine = instance.opponentStrumline;
	}

	function onNoteHit(event:HitNoteScriptEvent)
	{
		var instance = PlayState.instance;

		if (!event.note.noteData.getMustHitNote()) {
			instance.opponentStrumline.playNoteSplash(event.note.noteData.data % 4); //  woah.... opponent note  splash.... so cools....
			instance.vocals.set_volume(1.0); // work around for split vocals (v0.3.2 doesn't really support non-split vocals all that well currently...)
		}

		super.onNoteHit(event);
	}

	function onStepHit(event:SongTimeScriptEvent):Void {
		super.onStepHit(event);
	
		var instance = PlayState.instance;
		var bpm = Conductor.instance.get_bpm();
		var crochet = ((60 / bpm) * 1000);

		if (event.step > 0) 
			if (event.step % 8 == 0) {
				instance.camHUD.x = 15;
				if (camHudTweenX != null) {
					camHudTweenX.cancel();
				}
				camHudTweenX = FlxTween.tween(instance.camHUD, {x: 0}, crochet/500, {type: FlxEase.backOut});
				if (strumScaleTweenXR != null) {
					strumScaleTweenXR.cancel();
				}
				instance.playerStrumline.scale.x = 0.9;
				instance.playerStrumline.scale.y = 0.55;
				strumScaleTweenXR = FlxTween.tween(instance.playerStrumline.scale, {x: 0.7, y: 0.7/* , angle: -30 */}, crochet/1500, {type: FlxEase.backOut});
				if (strumScaleTweenXL != null) {
					strumScaleTweenXL.cancel();
				}
				instance.opponentStrumline.scale.x = 0.9;
				instance.opponentStrumline.scale.y = 0.55;
				strumScaleTweenXL = FlxTween.tween(instance.opponentStrumline.scale, {x: 0.7, y: 0.7/* , angle: 30 */}, crochet/1500, {type: FlxEase.backOut});

				var index = 0;
				for (strum in instance.opponentStrumline.group.members) {
					if (strumAngleTweens[index] != null) {
						strumAngleTweens[index].cancel();
					}
					strum.angle = 0;
					strumAngleTweens[index] = FlxTween.tween(strum, {angle: 15}, crochet/1500, {type: FlxEase.backOut});
					index++;
				}
				index = 0;
				for (strum in instance.playerStrumline.group.members) {
					if (strumAngleTweens[index+4] != null) {
						strumAngleTweens[index+4].cancel();
					}
					strum.angle = 0;
					strumAngleTweens[index+4] = FlxTween.tween(strum, {angle: -15}, crochet/1500, {type: FlxEase.backOut});
					index++;
				}
				
			} else if (event.step % 8 == 4) {
				instance.camHUD.x = -15;
				if (camHudTweenX != null) {
					camHudTweenX.cancel();
				}
				camHudTweenX = FlxTween.tween(instance.camHUD, {x: 0}, crochet/500, {type: FlxEase.backOut});
				if (strumScaleTweenYR != null) {
					strumScaleTweenYR.cancel();
				}
				instance.playerStrumline.scale.y = 0.9;
				instance.playerStrumline.scale.x = 0.55;
				strumScaleTweenYR = FlxTween.tween(instance.playerStrumline.scale, {y: 0.7, x: 0.7/* , angle: 30 */}, crochet/1500, {type: FlxEase.backOut});
				if (strumScaleTweenYL != null) {
					strumScaleTweenYL.cancel();
				}
				instance.opponentStrumline.scale.y = 0.9;
				instance.opponentStrumline.scale.x = 0.55;
				strumScaleTweenYL = FlxTween.tween(instance.opponentStrumline.scale, {y: 0.7, x: 0.7/* , angle: -30 */}, crochet/1500, {type: FlxEase.backOut});
				
				var index = 0;
				for (strum in instance.opponentStrumline.group.members) {
					if (strumAngleTweens[index] != null) {
						strumAngleTweens[index].cancel();
					}
					strum.angle = 0;
					strumAngleTweens[index] = FlxTween.tween(strum, {angle: -15}, crochet/1500, {type: FlxEase.backOut});
					index++;
				}
				index = 0;
				for (strum in instance.playerStrumline.group.members) {
					if (strumAngleTweens[index+4] != null) {
						strumAngleTweens[index+4].cancel();
					}
					strum.angle = 0;
					strumAngleTweens[index+4] = FlxTween.tween(strum, {angle: 15}, crochet/1500, {type: FlxEase.backOut});
					index++;
				}
			}

		if (event.step >= 131 && event.step < 516)
			if (event.step % 8) {
				instance.camHUD.angle = 5;
				if (camHudTweenAngle != null) {
					camHudTweenAngle.cancel();
				}
				camHudTweenAngle = FlxTween.tween(instance.camHUD, {angle: 0}, crochet/500, {type: FlxEase.backOut});
			} else  if (event.step % 8 == 4) {
				instance.camHUD.angle = -5;
				if (camHudTweenAngle != null) {
					camHudTweenAngle.cancel();
				}
				camHudTweenAngle = FlxTween.tween(instance.camHUD, {angle: 0}, crochet/500, {type: FlxEase.backOut});
			}

		if (event.step == 908) {
			for (strum in instance.opponentStrumline.group.members) {
				strum.alpha = 1;
				FlxTween.tween(strum, {alpha: 0}, crochet/500, {type: FlxEase.backOut});
			}
			for (strum in instance.playerStrumline.group.members) {
				strum.alpha = 1;
				FlxTween.tween(strum, {alpha: 0}, crochet/500, {type: FlxEase.backOut});
			} // 
		} else if (event.step == 1011) {
			for (strum in instance.opponentStrumline.group.members) {
				FlxTween.tween(strum, {alpha: 1}, crochet/500, {type: FlxEase.backOut});
			}
			for (strum in instance.playerStrumline.group.members) {
				FlxTween.tween(strum, {alpha: 1}, crochet/500, {type: FlxEase.backOut});
			}
		}

		// curStep == 4 or curStep == 131 or curStep == 260 or curStep == 392 or curStep == 772 or curStep == 908 or curStep == 1028 or curStep == 1114 or curStep == 1118 or curStep == 1122 or curStep == 1286 or curStep == 1540 or curStep == 1796
		if (event.step == 3 || event.step == 130 || event.step == 259 || event.step == 391 || event.step == 771 || event.step == 907 || event.step == 1027 || event.step == 1113 || event.step == 1117 || event.step == 1121 || event.step == 1285 || event.step == 1539 || event.step == 1795) {
			instance.camHUD.angle = 5;
			if (camHudTweenAngle != null) {
				camHudTweenAngle.cancel();
			}
			camHudTweenAngle = FlxTween.tween(instance.camHUD, {angle: 0}, crochet/1500, {type: FlxEase.backOut});
		}
	}

	function onBeatHit(event:SongTimeScriptEvent):Void {
		super.onBeatHit(event);
	}

	function onUpdate(event):Void {
		var instance = PlayState.instance;
	}

	function onNoteMiss(event) {
		super.onNoteMiss(event);
	}

	function onNoteGhostMiss(event) {
		super.onNoteGhostMiss(event);
	}
}
